<?xml version="1.0" encoding="utf-8" standalone="no"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" version="2.0">
    <channel>
        <title>New Rustacean</title>
        <link>http://newrustacean.com</link>
        <description>A podcast about learning the Rust programming language—from scratch!</description>
        <generator>Feeder 2.5.12(2294); Mac OS X Version 10.11.1 (Build 15B42) http://reinventedsoftware.com/feeder/</generator>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <language>en</language>
        <copyright>2015 Chris Krycho</copyright>
        <managingEditor>hello@newrustacean.com (Chris Krycho)</managingEditor>
        <webMaster>hello@newrustacean.com (Chris Krycho)</webMaster>
        <pubDate>Thu, 29 Oct 2015 22:45:19 -0400</pubDate>
        <lastBuildDate>Thu, 29 Oct 2015 22:45:19 -0400</lastBuildDate>
        <image>
            <url>http://newrustacean.com/podcast.png</url>
            <title>New Rustacean</title>
            <link>http://newrustacean.com</link>
            <width>144</width>
            <height>144</height>
        </image>
        <atom:link href="http://www.newrustacean.com/feed.xml" rel="self" type="application/rss+xml"/>
        <itunes:author>Chris Krycho</itunes:author>
        <itunes:subtitle>Let’s try some Rust, shall we?</itunes:subtitle>
        <itunes:summary><![CDATA[Documenting a journey into a new programming language—with source code, examples, and almost certainly some out-and-out hilarities along the way.]]></itunes:summary>
        <itunes:keywords>Rust,programming,programming languages,software</itunes:keywords>
        <itunes:image href="http://newrustacean.com/podcast.png"/>
        <itunes:explicit>no</itunes:explicit>
        <itunes:owner>
            <itunes:name>Chris Krycho</itunes:name>
            <itunes:email>hello@newrustacean.com</itunes:email>
        </itunes:owner>
        <itunes:block>no</itunes:block>
        <itunes:category text="Technology">
            <itunes:category text="Software How-To"/>
            <itunes:category text="Tech News"/>
        </itunes:category>
        <itunes:category text="Education">
            <itunes:category text="Training"/>
        </itunes:category>
        <item>
            <title>e004: Functionalized</title>
            <link>http://newrustacean.com/show_notes/e004/</link>
            <description><![CDATA[<li><strong>Date:</strong> October 29, 2015</li>
<li><strong>Subject:</strong> Functions, methods, closures, and function as arguments!</li>
<li><strong>Audio:</strong>
<ul>
<li><a href="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e004.m4a">M4A</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/e004.mp3">MP3</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.ogg/cdn.newrustacean.com/e004.ogg">Ogg</a></li>
</ul></li>
</ul>
<h1 id="notes">Notes</h1>
<p>This week’s episode covers the basics of all sorts of functions: normal functions, methods, and closures.</p>
<h2 id="closures">Closures</h2>
<ul>
<li><a href="http://martinfowler.com/bliki/Lambda.html">An explanation (in Ruby) by Martin Fowler</a></li>
<li><a href="https://doc.rust-lang.org/book/closures.html">Rust book</a></li>
<li><a href="http://rustbyexample.com/fn/closures.html">Rust by Example</a></li>
<li><a href="http://programmers.stackexchange.com/questions/40454/what-is-a-closure">“What is a closure?” (Progammers Stack Exchange)</a> – the first answer is the best, but the second answer may be a helpful stepping stone for people just getting their heads around this and coming from OOP languages like C++ or Java (even though I disagree with the explanation in some ways).</li>
<li><a href="http://stackoverflow.com/questions/36636/what-is-a-closure">“What is a closure?” (Stack Overflow)</a> – careful, thorough answer using JavaScript as an example.</li>
</ul>
<h1 id="links">Links</h1>
<ul>
<li><a href="http://exercism.io/languages/rust">Exercism</a> (hat tip: <a href="https://github.com/Lechindianer">Lechindanier on GitHub</a>)</li>
<li><a href="https://github.com/ctjhoa/rust-learning">Rust Learning</a></li>
<li><a href="http://www.chriskrycho.com/2015/rust-and-swift-viii.html">Rust and Swift (viii)</a></li>
</ul>
<h1 id="followsupport">Follow/Support</h1>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li><a href="https://www.dwolla.com/hub/chriskrycho">Dwolla</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
]]></description>
            <pubDate>Thu, 29 Oct 2015 22:45:12 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e004.m4a" length="7007649" type="audio/x-m4a"/>
            <guid isPermaLink="false">BC4D9C42-0F4C-4497-9059-436A8906657E</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>Functions, methods, closures, and function as arguments!</itunes:subtitle>
            <itunes:summary><![CDATA[Functions, methods, closures, and function as arguments!

NOTES

This week’s episode covers the basics of all sorts of functions: normal
functions, methods, and closures.

Closures

-   An explanation (in Ruby) by Martin Fowler
-   Rust book
-   Rust by Example
-   “What is a closure?” (Progammers Stack Exchange) ‚Äì the first answer
    is the best, but the second answer may be a helpful stepping stone
    for people just getting their heads around this and coming from OOP
    languages like C++ or Java (even though I disagree with the
    explanation in some ways).
-   “What is a closure?” (Stack Overflow) – careful, thorough answer
    using JavaScript as an example.

LINKS

-   Exercism (hat tip: Lechindanier on GitHub)
-   Rust Learning
-   Rust and Swift (viii)

FOLLOW/SUPPORT

-   New Rustacean:
    -   Twitter: @newrustacean
    -   App.net: @newrustacean
    -   Patreon.com/chriskrycho
    -   Dwolla.com/hub/chriskrycho
    -   Email: hello@newrustacean.com
-   Chris Krycho
    -   Twitter: @chriskrycho
    -   App.net: @chriskrycho
]]></itunes:summary>
            <itunes:explicit>no</itunes:explicit>
            <itunes:duration>17:07</itunes:duration>
        </item>
        <item>
            <title>e003: No More Nulls</title>
            <link>http://newrustacean.com/show_notes/e003/</link>
            <description><![CDATA[<p>No More Nulls</p>
<ul>
<li><strong>Date:</strong> October 21, 2015</li>
<li><strong>Subject:</strong> Enumerated (<code>enum</code>) types, pattern matching, and meaningful return types.</li>
<li><strong>Audio:</strong>
<ul>
<li><a href="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e003.m4a">M4A</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/e003.mp3">MP3</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.ogg/cdn.newrustacean.com/e003.ogg">Ogg</a></li>
</ul></li>
</ul>
<h1 id="notes">Notes</h1>
<p>Today’s episode discusses, in order:</p>
<ul>
<li>Enumerated types, with an eye to the difference between structs and enums, and to the differences between <code>enum</code>s in C and in Rust.</li>
<li>Pattern matching, with a focus on using them with enumerated types and some discussion about how they differ from <code>switch</code> blocks in C-like languages.</li>
<li>Using the <code>Option</code> and <code>Result</code> enumerated types with pattern matching to provide meaningful returns from functions safely.</li>
</ul>
<h2 id="order">Order</h2>
<p>There is a specific order to the examples below, and it is <em>not</em> the automatically-alphabetized order rendered by <code>rustdoc</code>. Instead, you should work through in the sequence they appear in the <a href="/src/show_notes/e003/e003.rs.html">source</a>:</p>
<ol type="1">
<li><a href="/show_notes/e003/enum.RelatedishThings.html">RelatedishThings</a></li>
<li><a href="/show_notes/e003/fn.demonstrate_basic_enumeration.html">demonstrate_basic_enumeration</a></li>
<li><a href="/show_notes/e003/fn.demonstrate_match.html">demonstrate_match</a></li>
<li><a href="/show_notes/e003/fn.get_an_option.html">get_an_option</a></li>
<li><a href="/show_notes/e003/fn.demonstrate_option.html">demonstrate_option</a></li>
<li><a href="/show_notes/e003/fn.get_a_result.html">get_a_result</a></li>
<li><a href="/show_notes/e003/fn.demonstrate_result.html">demonstrate_result</a></li>
</ol>
<h2 id="links">Links</h2>
<ul>
<li>New Rustacean <a href="https://github.com/chriskrycho/newrustacean.com/pull/1">Pull Request #1</a></li>
<li>Work on IDE support!
<ul>
<li><a href="https://www.rust-lang.org/ides.html">Landing page</a></li>
<li>My chosen tool: <a href="https://github.com/alexeykudinkin/intellij-rust">JetBrains/IntelliJ</a></li>
</ul></li>
<li><a href="https://github.com/carols10cents/rustlings">Rustlings</a></li>
<li><a href="http://jakegoulding.com/rust-ffi-omnibus/basics/">Rust FFI Omnibus</a></li>
</ul>
<h1 id="followsupport">Follow/Support</h1>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li>Email: <script type="text/javascript">
<!--
h='&#110;&#x65;&#x77;&#114;&#x75;&#x73;&#116;&#x61;&#x63;&#x65;&#x61;&#110;&#46;&#x63;&#x6f;&#x6d;';a='&#64;';n='&#104;&#x65;&#108;&#108;&#x6f;';e=n+a+h;
document.write('<a h'+'ref'+'="ma'+'ilto'+':'+e+'" clas'+'s="em' + 'ail">'+e+'<\/'+'a'+'>');
// -->
</script><noscript>&#104;&#x65;&#108;&#108;&#x6f;&#32;&#x61;&#116;&#32;&#110;&#x65;&#x77;&#114;&#x75;&#x73;&#116;&#x61;&#x63;&#x65;&#x61;&#110;&#32;&#100;&#x6f;&#116;&#32;&#x63;&#x6f;&#x6d;</noscript></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>]]></description>
            <pubDate>Wed, 21 Oct 2015 13:10:12 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e003.m4a" length="8178565" type="audio/x-m4a"/>
            <guid isPermaLink="false">E39A4582-8095-4645-8925-AB2887828F93</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>Enumerated (`enum`) types, pattern matching, and meaningful return values.</itunes:subtitle>
            <itunes:summary><![CDATA[No More Nulls

-   Date: October 21, 2015
-   Subject: Enumerated (`enum`) types, pattern matching, and meaningful return values.

# Notes

Today’s episode discusses, in order:

-   Enumerated types, with an eye to the difference between structs and
    enums, and to the differences between enums in C and in Rust.
-   Pattern matching, with a focus on using them with enumerated types
    and some discussion about how they differ from switch blocks in
    C-like languages.
-   Using the Option and Result enumerated types with pattern matching
    to provide meaningful returns from functions safely.


## Order

There is a specific order to the examples below, and it is _not_ the
automatically-alphabetized order rendered by rustdoc. Instead, you
should work through in the sequence they appear in the source:

1.  RelatedishThings
2.  demonstrate_basic_enumeration
3.  demonstrate_match
4.  get_an_option
5.  demonstrate_option
6.  get_a_result
7.  demonstrate_result]]></itunes:summary>
            <itunes:explicit>no</itunes:explicit>
            <itunes:duration>16:51</itunes:duration>
        </item>
        <item>
            <title>e002: Something borrowed, something… moved?</title>
            <link>http://newrustacean.com/show_notes/e002/</link>
            <description><![CDATA[<p>Something borrowed, something… moved?</p>
<ul>
<li><strong>Date:</strong> October 12, 2015</li>
<li><strong>Subject:</strong> The <code>struct</code> data type constructor, and the basics of Rust’s “ownership” concept and “borrowing” and “moving”.</li>
<li><strong>Audio:</strong>
<ul>
<li><a href="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e002.m4a">M4A</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/e002.mp3">MP3</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.ogg/cdn.newrustacean.com/e002.ogg">Ogg</a></li>
</ul></li>
</ul>
<h1 id="followsupport">Follow/Support</h1>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
<h1 id="notes">Notes</h1>
<p>Today’s episode discusses, and the associated source code demonstrates, a few basic behaviors of structs… including borrowing!</p>
<p>After taking a short look at one of Rust’s basic approaches to creating new types, we dive into a <em>fairly</em> thorough overview of how borrowing works in fairly run-of-the-mill Rust code. This is a basic introduction, and as such I’m not getting into things like heap-allocated memory (<code>Box</code>) or dealing with <code>move</code> semantics with threads or closures. (I haven’t actually figured those out well enough yet to write something like this for them!)</p>
<p>As usual, you’ll want to have the <a href="/src/show_notes/e002.rs.html"><code>src</code></a> open to see what I’m doing with the components documented below.</p>
<h1 id="links">Links</h1>
<ul>
<li><code>rustfmt</code> – a tool for formatting Rust code
<ul>
<li><a href="https://github.com/nrc/rustfmt">repo</a></li>
<li><a href="http://www.ncameron.org/blog/rustfmt-ing-rust/">“rustfmt-ing Rust`</a></li>
<li><a href="https://www.reddit.com/r/rust/comments/3nt2vm/rustfmting_rust_please_help_me_rustfmt_the_rust/">Reddit discussion</a></li>
</ul></li>
<li>RFC for incremental compilation
<ul>
<li><a href="https://github.com/nikomatsakis/rfcs/blob/incremental-compilation/text/0000-incremental-compilation.md">Text of the RFC</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/1298">GitHub pull request</a></li>
</ul></li>
</ul>
]]></description>
            <pubDate>Sun, 11 Oct 2015 22:24:16 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e002.m4a" length="8322086" type="audio/x-m4a"/>
            <guid isPermaLink="false">03DD0BB6-9615-420A-A43B-B6EB0BBCD1C4</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>Borrow a `struct` for a while. Then give it back, or keep it for yourself!</itunes:subtitle>
            <itunes:summary><![CDATA[Something borrowed, something… moved?

* Date: October 12, 2015

* Subject: The struct data type constructor, and the basics of Rust’s “ownership” concept and “borrowing” and “moving”.

* Audio:

* M4A

* MP3

* Ogg

Follow/Support

* New Rustacean:

* Twitter: @newrustacean

* App.net: @newrustacean

* Patreon

* Email: hello@newrustacean.com

* Chris Krycho

* Twitter: @chriskrycho

* App.net: @chriskrycho

Notes
Today’s episode discusses, and the associated source code demonstrates, a few basic behaviors of structs… including borrowing!

After taking a short look at one of Rust’s basic approaches to creating new types, we dive into a fairly thorough overview of how borrowing works in fairly run-of-the-mill Rust code. This is a basic introduction, and as such I’m not getting into things like heap-allocated memory (Box) or dealing with move semantics with threads or closures. (I haven’t actually figured those out well enough yet to write something like this for them!)

As usual, you’ll want to have the src open to see what I’m doing with the components documented below.
Links

* rustfmt – a tool for formatting Rust code

* repo

* “rustfmt-ing Rust`

* Reddit discussion

* RFC for incremental compilation

* Text of the RFC

* GitHub pull request]]></itunes:summary>
            <itunes:explicit>no</itunes:explicit>
            <itunes:duration>17:12</itunes:duration>
        </item>
        <item>
            <title>e001: Document All the Things</title>
            <link>http://newrustacean.com/show_notes/e001/</link>
            <description><![CDATA[<h1 id="document-all-the-things">Document all the things!</h1>
<ul>
<li><strong>Date:</strong> October 3, 2015</li>
<li><strong>Subject:</strong> Documentation in general, and <code>rustdoc</code> and <code>cargo doc</code> in particular.</li>
<li><strong>Audio:</strong>
<ul>
<li><a href="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e001.m4a">M4A</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/e001.mp3">MP3</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.ogg/cdn.newrustacean.com/e001.ogg">Ogg</a></li>
</ul></li>
</ul>
<h1 id="followsupport">Follow/Support</h1>
<ul>
<li>New Rustacean:
<ul>
<li>Twitter: <a href="https://www.twitter.com/newrustacean">@newrustacean</a></li>
<li>App.net: <a href="https://alpha.app.net/newrustacean">@newrustacean</a></li>
<li><a href="https://www.patreon.com/newrustacean">Patreon</a></li>
<li>Email: <a href="mailto:hello@newrustacean.com">hello@newrustacean.com</a></li>
</ul></li>
<li>Chris Krycho
<ul>
<li>Twitter: <a href="https://www.twitter.com/chriskrycho">@chriskrycho</a></li>
<li>App.net: <a href="https://alpha.app.net/chriskrycho">@chriskrycho</a></li>
</ul></li>
</ul>
<h1 id="notes">Notes</h1>
<p>This is a mostly-empty module, and it is intended as such. Why? Well, because <em>almost</em> all the sample code exists in these comments, which serve as the show notes. If you listen to the episode or take a look at the <a href="/src/show_notes/e001.rs.html">source files</a>, you’ll see how it works!</p>
<p>The components below are included <em>solely</em> so you can see how the docstrings work with each kind of thing. Make sure to click on the names of the items: there is more documentation there. Again, take a look at the <a href="/src/show_notes/e001.rs.html">source</a> to see how it looks in the context of a file module.</p>
<p>Note that this module-level docstring uses <code>rather than `///`-style comments. This is because this docstring is documenting the item which contains it, rather than the following item. Per [Rust RFC 505][1], the preferred approach is always to use the &quot;following&quot; form (`///`) rather than the &quot;containing&quot; form (</code>), except for module-level docs like these. (I will be following RFC 505 throughout.)</p>
<h1 id="links">Links</h1>
<ul>
<li><a href="https://github.com/rust-lang/rfcs/issues/1061">Rust and MSVC tracking issue</a></li>
<li>Other documentation tools:
<ul>
<li>Predecessors:
<ul>
<li><a href="http://sphinx-doc.org">Python’s Sphinx tool</a></li>
<li><a href="http://www.stack.nl/~dimitri/doxygen/">Doxygen</a></li>
<li><a href="http://usejsdoc.org">JSDoc</a></li>
<li><a href="http://www.oracle.com/technetwork/articles/java/index-jsp-135444.html">JavaDoc</a></li>
</ul></li>
<li>Other new languages with Markdown tooling
<ul>
<li><a href="http://julialang.org">Julia</a> has a <a href="http://julia.readthedocs.org/en/latest/manual/documentation/">built-in documentation system</a></li>
<li><a href="http://elixir-lang.org">Elixir</a> has <a href="https://github.com/elixir-lang/ex_doc">ex_doc</a></li>
</ul></li>
</ul></li>
<li><a href="http://blog.rust-lang.org/2015/09/17/Rust-1.3.html">Rust 1.3 release announcement</a></li>
<li>Rust’s package hosting: <a href="https://crates.io">crates.io</a>
<ul>
<li><a href="https://github.com/brson/taskcluster-crater">Crater</a> for testing for backwards compatibility</li>
</ul></li>
<li><a href="http://semver.org">Semantic versioning</a>
<ul>
<li><a href="http://blog.rust-lang.org/2014/10/30/Stability.html">“Stability as a Deliverable”</a>: Rust official blog post on version stability, backwards compatibility, and release channels.</li>
</ul></li>
<li><a href="https://doc.rust-lang.org/book/documentation.html">The Rust book chapter on <code>rustdoc</code></a></li>
</ul>]]></description>
            <pubDate>Sat, 03 Oct 2015 16:04:28 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e001.m4a" length="8417950" type="audio/x-m4a"/>
            <guid isPermaLink="false">9846F954-2459-4E89-BAF6-0DB4DA62E6D3</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>Documentation in general, and rustdoc and cargo doc in particular.</itunes:subtitle>
            <itunes:summary><![CDATA[Documentation in general, and rustdoc and cargo doc in particular.

Document all the things!

* Date: October 3, 2015

* Subject: Documentation in general, and rustic and cargo doc in particular.

* Audio:

* M4A

* MP3

Follow/Support

* New Rustacean:

* Twitter: @newrustacean

* App.net: @newrustacean

* Patreon

* Email: hello@newrustacean.com

* Chris Krycho

* Twitter: @chriskrycho

* App.net: @chriskrycho

Notes
This is a mostly-empty module, and it is intended as such. Why? Well, because almost all the sample code exists in these comments, which serve as the show notes. If you listen to the episode or take a look at the source files, you’ll see how it works!

The components below are included solely so you can see how the docstrings work with each kind of thing. Make sure to click on the names of the items: there is more documentation there. Again, take a look at the source to see how it looks in the context of a file module.

Note that this module-level docstring uses rather than `///`-style comments. This is because this docstring is documenting the item which contains it, rather than the following item. Per [Rust RFC 505][1], the preferred approach is always to use the &quot;following&quot; form (`///`) rather than the &quot;containing&quot; form (), except for module-level docs like these. (I will be following RFC 505 throughout.)
Links

* Rust and MSVC tracking issue

* Other documentation tools:

* Predecessors:

* Python’s Sphinx tool

* Oxygen

* JSDoc

* JavaDoc

* Other new languages with Markdown tooling

* Julia has a built-in documentation system

* Elixir has ex_doc

* Rust 1.3 release announcement

* Rust’s package hosting: crates.io

* Crater for testing for backwards compatibility

* Semantic versioning

* “Stability as a Deliverable”: Rust official blog post on version stability, backwards compatibility, and release channels.

* The Rust book chapter on rustc]]></itunes:summary>
            <itunes:explicit>no</itunes:explicit>
            <itunes:duration>17:06</itunes:duration>
        </item>
        <item>
            <title>e000: Hello, world!</title>
            <link>http://newrustacean.com/show_notes/e000/</link>
            <description><![CDATA[<h1 id="hello-world">Hello, World!</h1>
<ul>
<li>Date: September 24, 2015</li>
<li>Subject: The host, the language, and the show!</li>
<li>Audio:
<ul>
<li><a href="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e000.m4a">M4A</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.mp3/cdn.newrustacean.com/e000.mp3">MP3</a></li>
<li><a href="http://www.podtrac.com/pts/redirect.ogg/cdn.newrustacean.com/e000.ogg">Ogg</a></li>
</ul></li>
</ul>
<p>Today’s show is pretty meta. You can skip it if you just want to start with something more technical, but I thought listeners might want to know a little about the origins of the show and my own background, so that’s what you get today. Next time, we’ll be tackling the <code>rustdoc</code> command in some detail.</p>
<hr />
<p>This is an almost-empty module: we aren’t doing any fun code samples yet. I included the standard “Hello, world!” example, because how could I not? However, at some point in the future, there will be much more detailed code samples available:</p>
<ul>
<li>in the <a href="https://github.com/chriskrycho/newrustacean.com">GitHub repository</a> for the show</li>
<li>in the show notes attached to each episode</li>
</ul>
<p>Hopefully, the result will be a pretty helpful bunch of side content along with the audio of the podcast itself.</p>]]></description>
            <pubDate>Thu, 24 Sep 2015 19:14:50 -0400</pubDate>
            <enclosure url="http://www.podtrac.com/pts/redirect.m4a/cdn.newrustacean.com/e000.m4a" length="8458505" type="audio/x-m4a"/>
            <guid isPermaLink="false">CCE404BC-4B4A-4F28-A687-9BCC66C08CEF</guid>
            <itunes:author>Chris Krycho</itunes:author>
            <itunes:subtitle>A little about the host, and a little about the format of the show!</itunes:subtitle>
            <itunes:summary><![CDATA[Hello, world!

* Date: September 24, 2015

* Subject: The host, the language, and the show!

* Audio:

* M4A

* MP3

Today’s show is pretty meta. You can skip it if you just want to start with something more technical, but I thought listeners might want to know a little about the origins of the show and my own background, so that’s what you get today. Next time, we’ll be tackling the rustic command in some detail.

This is an almost-empty module: we aren’t doing any fun code samples yet. I included the standard “Hello, world!” example, because how could I not? However, at some point in the future, there will be much more detailed code samples available:

* in the GitHub repository for the show

* in the show notes attached to each episode

Hopefully, the result will be a pretty helpful bunch of side content along with the audio of the podcast itself.]]></itunes:summary>
            <itunes:explicit>no</itunes:explicit>
            <itunes:duration>17:11</itunes:duration>
        </item>
    </channel>
</rss>